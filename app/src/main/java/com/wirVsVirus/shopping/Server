package pgdp.intro;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Server extends Thread {

	public static String IP = "10.0.2.2";
	public static int PORT = 34350;
	private static boolean running;

	public static Path path = Paths.get("C:\\Users\\Johannes\\Desktop\\databaseHackaton.csv");
	public static ConcurrentHashMap<Integer, List<Store>> map;
	public static List<Store> list;

	public static void main(String[] args) {
		Server server = new Server();
		server.start();
	}

	public Server() {
		running = true;
		list = new LinkedList<Store>();
		map = new ConcurrentHashMap<Integer, List<Store>>();
		try {

			Consumer<String> mapper = x -> {
				Stream.of(x).map(next -> next.split("\\|")).forEach(str -> {

					try {
						list.add(new Store(str[0], str[1], str[2], str[3], str[4], str[5], str[6], str[7], str[8],
								str[9], str[10], str[11], str[12], str[13], str[14], str[15], str[16], str[17], str[18],
								str[19], str[20], str[21], str[22], str[23], str[24], str[25],
								str[26].replace(',', '.'), str[27].replace(',', '.')));

					} catch (NumberFormatException ignored) {
						System.out.println(ignored.toString());
					}
				});
			};
			
			BufferedReader bufferedReader = Files.newBufferedReader(path, Charset.forName("UTF-8"));
			bufferedReader.lines().forEach(mapper);
			bufferedReader.close();
			map = (ConcurrentHashMap<Integer, List<Store>>) list.stream()
					.collect(Collectors.groupingByConcurrent(Store::getPlz));

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void run() {
		try (ServerSocket serverSock = new ServerSocket(PORT);) {
			System.out.println("test");
			// Serverloop
			while (running) {
				serverSock.setSoTimeout(1000000);
				Socket sock = serverSock.accept();
				System.out.println("test");

				BufferedReader in = new BufferedReader(new InputStreamReader(sock.getInputStream()));
				
				String input = in.readLine();
				
				OutputStream outputStream = sock.getOutputStream();

				PrintWriter printWriter = new PrintWriter(outputStream, true);
				
				if(input.startsWith("plz")) {
					int plzRequest = Integer.parseInt(input.substring(3));
					List<Store> listRequest = getStoresByPostcode(plzRequest);
					try {
						listRequest.stream().forEach(x->{
							printWriter.println(x.toString());
						});
						} catch (NullPointerException e) {
							e.toString();
							System.out.println("kein markt bei plz");
						}
				} else {
					String[] arr = input.split("//|");
					String key = arr[0];
					String name = arr[1];
					
					
				}			
				
				sock.close();

			}
		} catch (IOException e1) {
			System.out.println(e1.toString());
		}

	}

	public Store getStore(int id) {
		return list.get(id);
	}
	
	public void closeServer() {
		running = false;
		Client c = new Client();
		c.requestStores(0);
		c.closeCommunication();
	}

	public List<Store> getStoresByPostcode(int code) {
		System.out.println(code);
		List<Store> list = map.entrySet().stream().filter(x -> x.getKey() == code).map(x -> x.getValue()).findAny().orElse(null);
		return list;
	}
}
